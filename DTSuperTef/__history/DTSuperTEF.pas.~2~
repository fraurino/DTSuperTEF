unit DTSuperTEF;

interface

uses
  System.SysUtils, System.Classes, System.JSON, REST.Client, REST.Types;

type
  TDTSuperTEF = class(TComponent)
  private
    FBaseURL: string;
    FToken: string;
    FClient: TRESTClient;
    FRequest: TRESTRequest;
    FResponse: TRESTResponse;

    procedure PrepareRequest(const AResource: string; AMethod: TRESTRequestMethod);

  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;

    procedure SetToken(const AToken: string);

    // Clientes
    function CriarCliente(AJSON: TJSONObject): TJSONObject;
    function ListarClientes: TJSONObject;
    function DetalharCliente(const Chave: string): TJSONObject;
    function AtualizarCliente(const Chave: string; AJSON: TJSONObject): TJSONObject;

    // POS
    function CriarPOS(AJSON: TJSONObject): TJSONObject;
    function ListarPOS(const ClienteChave: string): TJSONObject;
    function DetalharPOS(APOSId: Integer): TJSONObject;
    function AtualizarPOS(APOSId: Integer; AJSON: TJSONObject): TJSONObject;
    function ExcluirPOS(APOSId: Integer; const ClienteChave: string): TJSONObject;

    // Pagamentos
    function CriarPagamento(AJSON: TJSONObject): TJSONObject;
    function ListarPagamentos: TJSONObject;
    function DetalharPagamento(UniqueId: Integer): TJSONObject;

  published
    property BaseURL: string read FBaseURL write FBaseURL;
    property Token: string read FToken write FToken;
  end;

procedure Register;

implementation

procedure Register;
begin
  RegisterComponents('DT Inovacao', [TDTSuperTEF]);
end;

{ TDTSuperTEF }

constructor TDTSuperTEF.Create(AOwner: TComponent);
begin
  inherited;
  FBaseURL := 'https://api.supertef.com.br/api';
  FClient := TRESTClient.Create(FBaseURL);
  FRequest := TRESTRequest.Create(nil);
  FResponse := TRESTResponse.Create(nil);

  FRequest.Client := FClient;
  FRequest.Response := FResponse;
end;

destructor TDTSuperTEF.Destroy;
begin
  FRequest.Free;
  FResponse.Free;
  FClient.Free;
  inherited;
end;

procedure TDTSuperTEF.PrepareRequest(const AResource: string; AMethod: TRESTRequestMethod);
begin
  FClient.BaseURL := FBaseURL;
  FRequest.Resource := AResource;
  FRequest.Method := AMethod;
  FRequest.Params.Clear;
  FRequest.AddParameter('Authorization', 'Bearer ' + FToken, pkHTTPHEADER, [poDoNotEncode]);
  FRequest.Body.ClearBody;
end;

procedure TDTSuperTEF.SetToken(const AToken: string);
begin
  FToken := AToken;
end;

// === CLIENTES ===

function TDTSuperTEF.CriarCliente(AJSON: TJSONObject): TJSONObject;
begin
  PrepareRequest('clientes', rmPOST);
  FRequest.AddBody(AJSON.ToJSON, TRESTContentType.ctAPPLICATION_JSON);
  FRequest.Execute;
  Result := TJSONObject.ParseJSONValue(FResponse.Content) as TJSONObject;
end;

function TDTSuperTEF.ListarClientes: TJSONObject;
begin
  PrepareRequest('clientes', rmGET);
  FRequest.Execute;
  Result := TJSONObject.ParseJSONValue(FResponse.Content) as TJSONObject;
end;

function TDTSuperTEF.DetalharCliente(const Chave: string): TJSONObject;
begin
  PrepareRequest('clientes/cliente_chave?chave=' + Chave, rmGET);
  FRequest.Execute;
  Result := TJSONObject.ParseJSONValue(FResponse.Content) as TJSONObject;
end;

function TDTSuperTEF.AtualizarCliente(const Chave: string; AJSON: TJSONObject): TJSONObject;
begin
  PrepareRequest('clientes/cliente_chave?chave=' + Chave, rmPUT);
  FRequest.AddBody(AJSON.ToJSON, TRESTContentType.ctAPPLICATION_JSON);
  FRequest.Execute;
  Result := TJSONObject.ParseJSONValue(FResponse.Content) as TJSONObject;
end;

// === POS ===

function TDTSuperTEF.CriarPOS(AJSON: TJSONObject): TJSONObject;
begin
  PrepareRequest('pos', rmPOST);
  FRequest.AddBody(AJSON.ToJSON, TRESTContentType.ctAPPLICATION_JSON);
  FRequest.Execute;
  Result := TJSONObject.ParseJSONValue(FResponse.Content) as TJSONObject;
end;

function TDTSuperTEF.ListarPOS(const ClienteChave: string): TJSONObject;
begin
  PrepareRequest('pos?cliente_chave=' + ClienteChave, rmGET);
  FRequest.Execute;
  Result := TJSONObject.ParseJSONValue(FResponse.Content) as TJSONObject;
end;

function TDTSuperTEF.DetalharPOS(APOSId: Integer): TJSONObject;
begin
  PrepareRequest('pos/' + APOSId.ToString, rmGET);
  FRequest.Execute;
  Result := TJSONObject.ParseJSONValue(FResponse.Content) as TJSONObject;
end;

function TDTSuperTEF.AtualizarPOS(APOSId: Integer; AJSON: TJSONObject): TJSONObject;
begin
  PrepareRequest('pos/' + APOSId.ToString, rmPUT);
  FRequest.AddBody(AJSON.ToJSON, TRESTContentType.ctAPPLICATION_JSON);
  FRequest.Execute;
  Result := TJSONObject.ParseJSONValue(FResponse.Content) as TJSONObject;
end;

function TDTSuperTEF.ExcluirPOS(APOSId: Integer; const ClienteChave: string): TJSONObject;
var
  Body: TJSONObject;
begin
  PrepareRequest('pos/' + APOSId.ToString, rmDELETE);
  Body := TJSONObject.Create;
  try
    Body.AddPair('cliente_chave', ClienteChave);
    FRequest.AddBody(Body.ToJSON, TRESTContentType.ctAPPLICATION_JSON);
    FRequest.Execute;
    Result := TJSONObject.ParseJSONValue(FResponse.Content) as TJSONObject;
  finally
    Body.Free;
  end;
end;

// === PAGAMENTOS ===

function TDTSuperTEF.CriarPagamento(AJSON: TJSONObject): TJSONObject;
begin
  PrepareRequest('pagamentos', rmPOST);
  FRequest.AddBody(AJSON.ToJSON, TRESTContentType.ctAPPLICATION_JSON);
  FRequest.Execute;
  Result := TJSONObject.ParseJSONValue(FResponse.Content) as TJSONObject;
end;

function TDTSuperTEF.ListarPagamentos: TJSONObject;
begin
  PrepareRequest('pagamentos', rmGET);
  FRequest.Execute;
  Result := TJSONObject.ParseJSONValue(FResponse.Content) as TJSONObject;
end;

function TDTSuperTEF.DetalharPagamento(UniqueId: Integer): TJSONObject;
begin
  PrepareRequest('pagamentos/by-uniqueid/' + UniqueId.ToString, rmGET);
  FRequest.Execute;
  Result := TJSONObject.ParseJSONValue(FResponse.Content) as TJSONObject;
end;

end.
